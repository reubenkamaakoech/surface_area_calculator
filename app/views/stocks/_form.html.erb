<%= form_with(model: stock) do |form| %>
  <% if stock.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(stock.errors.count, "error") %> prohibited this stock from being saved:</h2>

      <ul>
        <% stock.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <% if current_user %>
      <%= form.label :user_id, hidden: true %>
      <%= form.number_field :user_id, id: :stock_user_id, class:"form-control", value: current_user.id, hidden: true %>
    <% end %>
  </div>

  <div class="row font-weight-bold mb-2">
    <div class="col">Product</div>
    <div class="col">Size</div>
    <div class="col">Buying Price</div>
    <div class="col">Quantity</div>
    <div class="col">Actions</div>
  </div>

  <div id="stock-items">
    <%= form.fields_for :stock_items do |item_form| %>
    <%= render "stock_item_fields", f: item_form %>
  <% end %>
  </div>
 
  <div>
  <script type="text/template" id="stock-item-template">
    <%= form.fields_for :stock_items, StockItem.new, child_index: "new_stock_items" do |item_form| %>
      <%= render "stock_item_fields", f: item_form %>
    <% end %>
  </script>
  </div>
  
  <div class="mt-3 mb-3">
     <%= link_to "Add Row", "#", id: "add-row", class: "btn btn-sm btn-outline-primary btn-sm" %>
  </div>

  <div>
    <%= form.submit nil, class:"btn btn-success btn-sm" %>
  </div>
<% end %>


<script>
  document.addEventListener("turbo:load", function() {
  const stockItemsContainer = document.getElementById("stock-items");

  // Delegate product change to container
  stockItemsContainer.addEventListener("change", function(e) {
    if (!e.target.matches('select[id$="_product_id"]')) return;

    const select = e.target;
    const selectedProductId = select.value;
    const row = select.closest('.stock-item');
    const sizeSelect = row.querySelector('select[id$="_size_id"]');
    const buyingPriceInput = row.querySelector('input.buying-price');

    // Clear size and buying price
    sizeSelect.innerHTML = '<option value="">Select Size</option>';
    buyingPriceInput.value = '';

    if (selectedProductId) {
      fetch(`/products/${selectedProductId}/sizes`)
        .then(response => response.json())
        .then(data => {
          data.forEach(size => {
            const option = document.createElement('option');
            option.value = size.id;
            option.textContent = size.name;
            option.dataset.buyingPrice = size.buying_price;
            sizeSelect.appendChild(option);
          });
        });
    }
  });

  // Delegate size change to container
  stockItemsContainer.addEventListener("change", function(e) {
    if (!e.target.matches('select[id$="_size_id"]')) return;

    const select = e.target;
    const row = select.closest('.stock-item');
    const selectedOption = select.options[select.selectedIndex];
    const buyingPriceInput = row.querySelector('input.buying-price');

    if (selectedOption && selectedOption.dataset.buyingPrice) {
      buyingPriceInput.value = selectedOption.dataset.buyingPrice;
    } else {
      buyingPriceInput.value = '';
    }
  });

  // Add Row
  const addRowButton = document.getElementById("add-row");
  const template = document.getElementById("stock-item-template").innerHTML;

  addRowButton.addEventListener("click", function(e) {
    e.preventDefault();
    const newId = new Date().getTime();
    const newRow = template.replace(/new_stock_items/g, newId);
    stockItemsContainer.insertAdjacentHTML('beforeend', newRow);
  });

  // Remove Row
  stockItemsContainer.addEventListener("click", function(e) {
    if (e.target.classList.contains("remove-row")) {
      e.preventDefault();
      e.target.closest('.stock-item').remove();
    }
  });
});
</script>


